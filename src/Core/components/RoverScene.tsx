/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 assets/models/rover_preview.glb -o src/Core/components/RoverScene.tsx 
*/

import * as THREE from 'three';
import React from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import path from 'path';

const ROVER_FILE = path.join(__dirname, '../assets/models/rover_preview.glb');
const TEXTURE_FILE = path.join(__dirname, '../assets/models/tex01.png');
console.log('ROVER_FILE: ', ROVER_FILE);
console.log('TEXTURE_FILE: ', TEXTURE_FILE);
//const ROVER_FILE = '../../../assets/models/rover_preview.glb';

type GLTFResult = GLTF & {
  nodes: {
    Hyperion: THREE.Mesh;
    upperArmL: THREE.Bone;
    leftArm: THREE.SkinnedMesh;
    upperArmR: THREE.Bone;
    rightArm: THREE.SkinnedMesh;
    thighL: THREE.Bone;
    leftLeg: THREE.SkinnedMesh;
    thighR: THREE.Bone;
    rightLeg: THREE.SkinnedMesh;
    wheelL1: THREE.Mesh;
    wheelL2: THREE.Mesh;
    wheelL3: THREE.Mesh;
    wheelR1: THREE.Mesh;
    wheelR2: THREE.Mesh;
    wheelR3: THREE.Mesh;
    screw: THREE.Mesh;
    arm: THREE.Mesh;
    head: THREE.Mesh;
  };
  materials: {
    roverFrame: THREE.MeshStandardMaterial;
    roverWheel: THREE.MeshStandardMaterial;
    human: THREE.MeshStandardMaterial;
    will: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[];
};

// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<
//     JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']
//   >
// >;

export function RoverScene(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(ROVER_FILE) as GLTFResult;
  console.log('loaded scene');
  Object.values(nodes).forEach((node) => {
    node.castShadow = true; // the wheels aren't explicitly in the JSX
  });
  const texture = useTexture(TEXTURE_FILE);
  texture.flipY = false;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Hyperion.geometry}
        material={materials.roverFrame}
        position={[-0.008, 0.627, 0.064]}
        scale={0.048}
        castShadow
      >
        <group position={[4.883, -41.199, 2.148]} scale={29.957}>
          <primitive object={nodes.upperArmL} />
          <skinnedMesh
            geometry={nodes.leftArm.geometry}
            material={materials.human}
            skeleton={nodes.leftArm.skeleton}
            frustumCulled={false}
            castShadow
          />
        </group>
        <group position={[4.883, -24.941, -3.012]} scale={29.957}>
          <primitive object={nodes.thighL} />
          <skinnedMesh
            geometry={nodes.leftLeg.geometry}
            material={materials.human}
            skeleton={nodes.leftLeg.skeleton}
            frustumCulled={false}
            castShadow
          />
        </group>
        <group position={[-4.5, -41.199, 2.312]} scale={29.957}>
          <primitive object={nodes.upperArmR} />
          <skinnedMesh
            geometry={nodes.rightArm.geometry}
            material={materials.human}
            skeleton={nodes.rightArm.skeleton}
            frustumCulled={false}
            castShadow
          />
        </group>
        <group position={[-4.5, -24.941, -2.848]} scale={29.957}>
          <primitive object={nodes.thighR} />
          <skinnedMesh
            geometry={nodes.rightLeg.geometry}
            material={materials.human}
            skeleton={nodes.rightLeg.skeleton}
            frustumCulled={false}
            castShadow
          />
        </group>
        <mesh geometry={nodes.screw.geometry} material={nodes.screw.material} position={[0.107, 3.891, 5.529]}>
          <mesh geometry={nodes.arm.geometry} material={materials.roverFrame} position={[-0.107, -3.891, -5.529]}>
            <mesh
              geometry={nodes.head.geometry}
              material={materials.will}
              position={[0.83, 4.502, 10.23]}
              scale={4.475}
              castShadow
            >
              <meshBasicMaterial map={texture} />
            </mesh>
          </mesh>
        </mesh>
      </mesh>
    </group>
  );
}

useGLTF.preload(ROVER_FILE);
