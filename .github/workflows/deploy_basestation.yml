name: Build and Create BaseStation Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read
  packages: read
  id-token: write

concurrency:
  group: 'create-release'
  cancel-in-progress: false

jobs:
  # Build the package for the current OS and create a zip file of the unpacked package.
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows, ubuntu] # Possible values: [ubuntu-latest, windows-latest, macOS-latest]
        ext: [AppImage, exe]
        exclude:
          - os: windows
            ext: AppImage
          - os: ubuntu
            ext: exe
        node: [18.x]

    runs-on: ${{ matrix.os }}-latest

    steps:
      # Checkout the repository. The repository is checked out including its submodules
      # that are cloned recursively.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install Node.js, NPM and Yarn
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # Extract the reference name from the tag and store it in an output.
      # If running on a branch, the reference name is everything after the last slash.
      # If running on a tag, the reference name is the tag name.
      - name: Extract Reference Name
        id: extract_ref_name
        run: echo "::set-output name=ref_name::$(basename "${{ github.ref_name }}")"

      # Install the Yarn packages. The --frozen-lockfile flag ensures that the lockfile is not updated.
      - name: Install Yarn Packages
        run: yarn install --frozen-lockfile --network-timeout 300000

      # Build the package. The package is built for the current OS.
      - name: Build Package
        run: yarn package

      # Rename the package to include the reference name and the OS.
      - name: Rename Package
        run: |
          ls -l release
          mv release/RED*.${{ matrix.ext }} "RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Installer.${{ matrix.ext }}"


      # Create a zip file of the unpacked package.
      - name: Create Zip
        uses: vimtor/action-zip@v1.1
        with:
          files: 'release/win-unpacked/'
          recursive: true
          dest: 'RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Unpacked.zip'

      # Upload the artifacts to GitHub. The artifacts are used in the publish job to create a release.
      # Or, they can be downloaded manually from the Actions tab if the release job is skipped.
      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}
          path: |
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Installer.${{ matrix.ext }}
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Unpacked.zip
    outputs:
      extract_ref_name: ${{ steps.extract_ref_name.outputs.ref_name }}

  temp:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: RED.${{ needs.build.outputs.extract_ref_name }}.*

      - name: List Files
        run: ls -l
  
  # publish:
  #   needs: build
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: RED.${{ needs.build.outputs.extract_ref_name }}.*

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         body: |
  #           Release ${{ github.ref }} autogenerated by GitHub Actions.
  #         draft: false
  #         prerelease: false

  #     - name: Upload Release Assets
  #       id: upload_release_assets
  #       uses: actions/upload-release-asset@v1
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: RED.${{ needs.build.outputs.extract_ref_name }}.*
  #         asset_name: RED.${{ needs.build.outputs.extract_ref_name }}.${{ matrix.os }}.Combined.${{ matrix.ext }}