name: Build and Create BaseStation Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read
  packages: read
  id-token: write

concurrency:
  group: 'create-release'
  cancel-in-progress: false

jobs:
  # Build the package for the current OS and create a zip file of the unpacked package.
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows] # Possible values: [ubuntu-latest, windows-latest, macOS-latest]
        node: [18.x]

    runs-on: ${{ matrix.os }}-latest

    steps:
      # Checkout the repository. The repository is checked out including its submodules
      # that are cloned recursively.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install Node.js, NPM and Yarn
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # Determine the version of the package. If running on a branch, the version is the branch name.
      # If running on a tag, the version is the tag name.
      - name: Determine Version
        id: version
        run: echo ${{ github.ref_name }} >> $GITHUB_ENV

      # Extract the reference name from the tag and store it in an output.
      # If running on a branch, the reference name is everything after the last slash.
      # If running on a tag, the reference name is the tag name.
      - name: Extract Reference Name
        id: extract_ref_name
        run: echo "test=$(basename "${{ github.ref_name }}")" >> $GITHUB_OUTPUT
      
        # run: echo "${{ github.ref_name }} | awk -F/ '{print $NF}' >> $GITHUB_OUTPUT"
        # run: echo "ref_name=$(echo ${{ github.ref_name }} | awk -F/ '{print $NF}')" >> $GITHUB_OUTPUT
        # run: echo "ref_name=$(echo ${{ github.ref_name }} | awk -F/ '{print $NF}')" >> $GITHUB_OUTPUT
        # run: echo "::set-output name=ref_name::$(echo ${{ github.ref_name }} | awk -F/ '{print $NF}')"
        # run: echo "ref_name=$(basename ${{ github.ref_name }})" >> $GITHUB_OUTPUT

      - name: Debug
        run: echo "${{ steps.extract_ref_name.outputs.test }}"

      # Install the Yarn packages. The --frozen-lockfile flag ensures that the lockfile is not updated.
      - name: Install Yarn Packages
        run: yarn install --frozen-lockfile --network-timeout 300000

      # Build the package. The package is built for the current OS.
      - name: Build Package
        run: yarn package

      # Rename the package to include the reference name and the OS.
      - name: Rename Package
        run: mv release/RED*.exe "RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Installer.exe"

      # Create a zip file of the unpacked package.
      - name: Create Zip
        uses: vimtor/action-zip@v1.1
        with:
          files: 'release/win-unpacked/'
          recursive: true
          dest: 'RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Unpacked.zip'

      # Upload the artifacts to GitHub. The artifacts are used in the publish job to create a release.
      # Or, they can be downloaded manually from the Actions tab if the release job is skipped.
      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}
          path: |
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Installer.exe
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.${{ matrix.os }}.Unpacked.zip
  
  # In the event of a push, create a release. It takes the artifacts from the build matrix and turns
  # them into a release. The release is a draft and a pre-release by default and is not published.
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' }}
    steps:
      # Extract the reference name from the tag and store it in an output.
      - name: Extract Reference Name
        id: extract_ref_name
        run: echo "ref_name=$(echo ${{ github.ref_name }} | cut -d '/' -f 2)" >> $GITHUB_OUTPUT

      # Download the artifacts from the build job.
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: |
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.windows
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.linux
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.macOS

      # Create a release on GitHub.
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          name: '${{ steps.extract_ref_name.outputs.ref_name }}'
          files: |
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.windows.Installer.exe
            RED.${{ steps.extract_ref_name.outputs.ref_name }}.windows.Unpacked.zip
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.linux.Installer.exe
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.linux.Unpacked.zip
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.macOS.Installer.exe
# RED.${{ steps.extract_ref_name.outputs.ref_name }}.macOS.Unpacked.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}